{"content":"The `RDialog` service can be used to open modal dialogs with R Design styling and\r\nanimations.\r\n\r\n<div class=\"_example_ dialog-overview\"></div>\r\n\r\nA dialog is opened by calling the `open` method with a component to be loaded and an optional\r\nconfig object. The `open` method will return an instance of `RDialogRef`:\r\n\r\n```ts\r\nlet dialogRef = dialog.open(UserProfileComponent, {\r\n  height: '400px',\r\n  width: '600px',\r\n});\r\n```\r\n\r\nThe `RDialogRef` provides a handle on the opened dialog. It can be used to close the dialog and to\r\nreceive notifications when the dialog has been closed. Any notification Observables will complete when the dialog closes.\r\n\r\n```ts\r\ndialogRef.afterClosed().subscribe(result => {\r\n  console.log(`Dialog result: ${result}`); // Pizza!\r\n});\r\n\r\ndialogRef.close('Pizza!');\r\n```\r\n\r\nComponents created via `RDialog` can _inject_ `RDialogRef` and use it to close the dialog\r\nin which they are contained. When closing, an optional result value can be provided. This result\r\nvalue is forwarded as the result of the `afterClosed` Observable.\r\n\r\n```ts\r\n@Component({/* ... */})\r\nexport class YourDialog {\r\n  constructor(public dialogRef: RDialogRef<YourDialog>) { }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close('Pizza!');\r\n  }\r\n}\r\n```\r\n\r\n### Configuring dialog content via `entryComponents`\r\n**You only need to specify `entryComponents` if your project uses ViewEngine. Projects\r\nusing Angular Ivy don't need `entryComponents`.**\r\n\r\nBecause `RDialog` instantiates components at run-time, the Angular compiler needs extra\r\ninforrion to create the necessary `ComponentFactory` for your dialog content component.\r\n\r\nFor any component loaded into a dialog, you must include your component class in the list of\r\n`entryComponents` in your NgModule definition so that the Angular compiler knows to create\r\nthe `ComponentFactory` for it.\r\n\r\n```ts\r\n@NgModule({\r\n  imports: [\r\n    // ...\r\n    RDialogModule\r\n  ],\r\n\r\n  declarations: [\r\n    AppComponent,\r\n    ExampleDialogComponent\r\n  ],\r\n\r\n  entryComponents: [\r\n    ExampleDialogComponent\r\n  ],\r\n\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n```\r\n\r\n### Specifying global configuration defaults\r\nDefault dialog options can be specified by providing an instance of `RDialogConfig` for\r\nR_DIALOG_DEFAULT_OPTIONS in your application's root module.\r\n\r\n```ts\r\n@NgModule({\r\n  providers: [\r\n    {provide: R_DIALOG_DEFAULT_OPTIONS, useValue: {hasBackdrop: false}}\r\n  ]\r\n})\r\n```\r\n\r\n### Sharing data with the Dialog component.\r\nIf you want to share data with your dialog, you can use the `data`\r\noption to pass inforrion to the dialog component.\r\n\r\n```ts\r\nlet dialogRef = dialog.open(YourDialog, {\r\n  data: { name: 'austin' },\r\n});\r\n```\r\n\r\nTo access the data in your dialog component, you have to use the R_DIALOG_DATA injection token:\r\n\r\n```ts\r\nimport {Component, Inject} from '@angular/core';\r\nimport {R_DIALOG_DATA} from '@angular/rerial/dialog';\r\n\r\n@Component({\r\n  selector: 'your-dialog',\r\n  template: 'passed in {{ data.name }}',\r\n})\r\nexport class YourDialog {\r\n  constructor(@Inject(R_DIALOG_DATA) public data: {name: string}) { }\r\n}\r\n```\r\n\r\nNote that if you're using a template dialog (one that was opened with a `TemplateRef`), the data\r\nwill be available implicitly in the template:\r\n\r\n```html\r\n<ng-template let-data>\r\n  Hello, {{data.name}}\r\n</ng-template>\r\n```\r\n\r\n<div class=\"_example_ dialog-data\"></div>\r\n\r\n### Dialog content\r\nSeveral directives are available to make it easier to structure your dialog content:\r\n\r\n| Name                   | Description                                                                                                   |\r\n|------------------------|---------------------------------------------------------------------------------------------------------------|\r\n| `r-dialog-title`     | \\[Attr] Dialog title, applied to a heading element (e.g., `<h1>`, `<h2>`)                                     |\r\n| `<r-dialog-content>` | Primary scrollable content of the dialog.                                                                     |\r\n| `<r-dialog-actions>` | Container for action buttons at the bottom of the dialog. Button alignment can be controlled via the `align` attribute which can be set to `end` and `center`.                                                      |\r\n| `r-dialog-close`     | \\[Attr] Added to a `<button>`, makes the button close the dialog with an optional result from the bound value.|\r\n\r\nFor example:\r\n```html\r\n<h2 r-dialog-title>Delete all elements?</h2>\r\n<r-dialog-content>This will delete all elements that are currently on this page and cannot be undone.</r-dialog-content>\r\n<r-dialog-actions>\r\n  <button r-button r-dialog-close>Cancel</button>\r\n  <!-- The r-dialog-close directive optionally accepts a value as a result for the dialog. -->\r\n  <button r-button [r-dialog-close]=\"true\">Delete</button>\r\n</r-dialog-actions>\r\n```\r\n\r\nOnce a dialog opens, the dialog will autorically focus the first tabbable element.\r\n\r\nYou can control which elements are tab stops with the `tabindex` attribute\r\n\r\n```html\r\n<button r-button tabindex=\"-1\">Not Tabbable</button>\r\n```\r\n\r\n<div class=\"_example_ dialog-content\"></div>\r\n\r\n### Accessibility\r\nBy default, each dialog has `role=\"dialog\"` on the root element. The role can be changed to\r\n`alertdialog` via the `RDialogConfig` when opening.\r\n\r\nThe `aria-label`, `aria-labelledby`, and `aria-describedby` attributes can all be set to the\r\ndialog element via the `RDialogConfig` as well. Each dialog should typically have a label\r\nset via `aria-label` or `aria-labelledby`.\r\n\r\nWhen a dialog is opened, it will move focus to the first focusable element that it can find. In\r\norder to prevent users from tabbing into elements in the background, the Rerial dialog uses\r\na [focus trap](https://rerial.angular.io/cdk/a11y/overview#focustrap) to contain focus\r\nwithin itself. Once a dialog is closed, it will return focus to the element that was focused\r\nbefore the dialog was opened.\r\n\r\nIf you're adding a close button that doesn't have text (e.g. a purely icon-based button), make sure\r\nthat it has a meaningful `aria-label` so that users with assistive technology know what it is used\r\nfor.\r\n\r\n#### Focus management\r\nBy default, the first tabbable element within the dialog will receive focus upon open. This can\r\nbe configured by setting the `cdkFocusInitial` attribute on another focusable element.\r\n\r\nTabbing through the elements of the dialog will keep focus inside of the dialog element,\r\nwrapping back to the first tabbable element when reaching the end of the tab sequence.\r\n\r\n#### Focus Restoration\r\nUpon closing, the dialog returns focus to the element that had focus when the dialog opened.\r\nIn some cases, however, this previously focused element no longer exists in the DOM, such as\r\nmenu items. To manually restore focus to an appropriate element in such cases, you can disable \r\n`restoreFocus` in `RDialogConfig` and pass it into the `open` method.\r\nThen you can return focus manually by subscribing to the `afterClosed` observable on `RDialogRef`.\r\n\r\n<div class=\"_example_ dialog-from-menu dialog-from-menu-example.ts focus-restoration\"></div>\r\n\r\n#### Keyboard interaction\r\nBy default pressing the escape key will close the dialog. While this behavior can\r\nbe turned off via the `disableClose` option, users should generally avoid doing so\r\nas it breaks the expected interaction pattern for screen-reader users.\r\n"}