@mixin r-for-theme($name) {
  @if ($r-theme-name == $name) {
    @content;
  }
}

@mixin r-for-themes($names...) {
  @each $name in $names {
    @include r-for-theme($name) {
      @content;
    }
  }
}

@mixin r-except-theme($name) {
  @if ($r-theme-name != $name) {
    @content;
  }
}

@mixin r-except-for-themes($names...) {
  @each $name in $names {
    @include r-except-theme($name) {
      @content;
    }
  }
}

@mixin r-install-css-properties($theme-name, $theme) {
  .r-theme-#{$theme-name} {

    @each $var, $value in $theme {
      @if (type-of($value) == 'string' and map-get($theme, $value)) {
        --#{$var}: var(--#{$value});
      } @else {
        --#{$var}: #{$value};
      }
    }
  }
}

@mixin r-pre-process-context($theme-name) {
  $r-theme-process-mode: 'pre-process' !global;

  $r-theme-name: $theme-name !global;
  $r-processed-theme: r-process-theme(r-get-registered-theme($theme-name)) !global;
}

@mixin r-lazy-process-context($theme-name) {
  $r-theme-process-mode: 'lazy-process' !global;

  $r-theme-name: $theme-name !global;
  $r-processed-theme: () !global;
}

@mixin r-install-component-with-css-props() {
  :host {
    @content;
  }
}

@mixin r-install-component-with-scss-vars() {
  $enabled-themes: r-get-enabled-themes();

  @each $theme-name in $enabled-themes {

    @include r-lazy-process-context($theme-name);

    /*
      :host can be prefixed
      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441

      We have to use :host instead of :host-context($theme), to be able to prefix theme class
      with something defined inside of @content, by prefixing &.
      For example this scss code:
        .r-theme-default {
          .some-selector & {
            ...
          }
        }
      Will result in next css:
        .some-selector .r-theme-default {
          ...
        }

      It doesn't work with :host-context because angular splitting it in two selectors and removes
      prefix in one of the selectors.
    */
    .r-theme-#{$theme-name} :host {
      @content;
    }
  }
}

// Entry point
// Installs component styles based on registered themes
// TODO: we hide :host inside of it which is not obvious
@mixin r-install-component() {

  @if ($r-enable-css-custom-properties) {

    @include r-install-component-with-css-props() {
      @content;
    }

  } @else {

    @include r-install-component-with-scss-vars() {
      @content;
    }
  }
}

@mixin r-install-global-with-css-props() {
  @content;

  @each $theme-name in r-get-enabled-themes() {
    @include r-install-css-properties($theme-name, r-get-registered-theme($theme-name));
  }
}

@mixin r-install-global-with-scss-vars() {

  @each $theme-name in r-get-enabled-themes() {
    @include r-pre-process-context($theme-name);

    .r-theme-#{$theme-name} {
      @content;
    }
  }
}

// Entry point
// Installs global styles based on registered themes
@mixin r-install() {
  @if ($r-enable-css-custom-properties) {
    @include r-install-global-with-css-props() {
      @content;
    }
  } @else {
    @include r-install-global-with-scss-vars() {
      @content;
    }
  }
}
